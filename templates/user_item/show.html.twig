{% extends 'base.html.twig' %}

{% block title %}Item{% endblock %}

{% block stylesheets %}
{{ parent() }}
<style>
    /* Style g√©n√©ral de la page */
    .user-item-container {
        max-width: 900px;
        margin: 0 auto;
        background: linear-gradient(145deg, #f9f9f9, #ffffff);
        border-radius: 20px;
        padding: 30px;
        box-shadow: 0 8px 30px rgba(0, 0, 0, 0.08);
    }
    
    /* Titre principal avec d√©grad√© */
    .page-title {
        font-size: 2.5rem;
        color: #333;
        margin-bottom: 30px;
        position: relative;
        padding-bottom: 15px;
        font-weight: 700;
        text-align: left;
    }
    
    .page-title::after {
        content: '';
        position: absolute;
        bottom: 0;
        left: 50%;
        transform: translateX(-50%);
        width: 100px;
        height: 4px;
        background: linear-gradient(90deg, #6e48aa, #9d50bb);
        border-radius: 2px;
    }

    /* Tableau redessin√© */
    .content-table {
        width: 100%;
        border-collapse: separate;
        border-spacing: 0 12px;
        margin-top: 25px;
    }
    
    .content-table th {
        color: #555;
        font-weight: 600;
        padding: 15px 20px;
        background-color: #f5f5f7;
        border-radius: 10px 0 0 10px;
        text-align: left;
        width: 25%;
        font-size: 0.95rem;
        letter-spacing: 0.5px;
        text-transform: uppercase;
    }
    
    .content-table td {
        padding: 15px 20px;
        background-color: #fff;
        border-radius: 0 10px 10px 0;
        box-shadow: 0 2px 15px rgba(0, 0, 0, 0.05);
        font-size: 1rem;
        color: #333;
        transition: all 0.2s ease;
    }
    
    .content-table tr:hover td {
        box-shadow: 0 5px 20px rgba(0, 0, 0, 0.1);
        transform: translateY(-2px);
    }

    /* Navigation entre articles */
    .pagination {
        margin: 30px 0;
        padding: 10px 0;
    }
    
    .nav-button {
        display: inline-flex;
        align-items: center;
        justify-content: center;
        padding: 12px 25px;
        border-radius: 50px;
        font-weight: 600;
        transition: all 0.3s ease;
        text-decoration: none;
        border: none;
        background: linear-gradient(145deg, #ffffff, #f0f0f0);
        box-shadow: 5px 5px 10px #d9d9d9, -5px -5px 10px #ffffff;
        color: #555;
    }
    
    .nav-button:hover:not(.disabled) {
        box-shadow: 4px 4px 8px #d9d9d9, -4px -4px 8px #ffffff, inset 2px 2px 5px #d9d9d9, inset -2px -2px 5px #ffffff;
        color: #6e48aa;
        transform: translateY(-2px);
    }
    
    .nav-button.primary {
        background: linear-gradient(145deg, #7b52c7, #6e48aa);
        color: white;
        box-shadow: 5px 5px 15px rgba(110, 72, 170, 0.3);
    }
    
    .nav-button.primary:hover {
        box-shadow: 4px 4px 10px rgba(110, 72, 170, 0.4), -2px -2px 10px rgba(157, 80, 187, 0.1);
        background: linear-gradient(145deg, #845ad5, #7650b8);
    }
    
    .nav-button.disabled {
        opacity: 0.6;
        cursor: not-allowed;
    }

    /* Bouton de like redessin√© */
    .like-button {
        position: relative;
        padding: 12px 24px;
        border-radius: 50px;
        border: none;
        background: linear-gradient(145deg, #f0f0f0, #ffffff);
        box-shadow: 5px 5px 10px #d1d1d1, -5px -5px 10px #ffffff;
        font-weight: 600;
        color: #555;
        transition: all 0.3s ease;
        margin-left: 15px;
        overflow: hidden;
        cursor: pointer;
        display: inline-flex;
        align-items: center;
        font-size: 0.95rem;
    }
    
    .like-button::before {
        content: '';
        position: absolute;
        width: 100%;
        height: 100%;
        background: linear-gradient(45deg, #ff5e62, #ff9966);
        top: 0;
        left: 0;
        opacity: 0;
        z-index: -1;
        transition: opacity 0.3s ease;
        border-radius: 50px;
    }
    
    .like-button:hover {
        transform: translateY(-3px);
        color: #333;
    }
    
    .like-button.liked {
        background: linear-gradient(145deg, #ff9966, #ff5e62);
        color: white;
        box-shadow: 5px 5px 15px rgba(255, 94, 98, 0.3);
    }
    
    .like-button.liked:hover {
        box-shadow: 4px 4px 10px rgba(255, 94, 98, 0.4);
        background: linear-gradient(145deg, #ff8e5e, #ff4c5a);
    }
    
    .like-button span {
        display: inline-block;
        margin-right: 8px;
        font-size: 1.2rem;
        transition: transform 0.3s ease;
    }
    
    .like-button:hover span {
        transform: scale(1.3);
    }

    /* Statut (Yes/No) */
    .status-badge {
        display: inline-block;
        padding: 6px 12px;
        border-radius: 20px;
        font-size: 0.85rem;
        font-weight: 600;
        margin-right: 10px;
    }
    
    .status-badge.yes {
        background-color: rgba(46, 213, 115, 0.15);
        color: #2ed573;
    }
    
    .status-badge.no {
        background-color: rgba(255, 71, 87, 0.15);
        color: #ff4757;
    }

    /* Lien URL stylis√© */
    .url-link {
        display: inline-flex;
        align-items: center;
        color: #6e48aa;
        font-weight: 500;
        text-decoration: none;
        transition: all 0.2s ease;
        padding: 8px 15px;
        border-radius: 8px;
        background-color: rgba(110, 72, 170, 0.08);
    }
    
    .url-link:hover {
        background-color: rgba(110, 72, 170, 0.15);
        color: #9d50bb;
        transform: translateY(-2px);
    }
    
    .url-link::before {
        content: 'üîó';
        margin-right: 8px;
        font-size: 1.1rem;
    }

    /* Description avec style avanc√© */
    .description-content {
        line-height: 1.7;
        color: #444;
        padding: 15px;
        border-left: 4px solid #6e48aa;
        background-color: rgba(110, 72, 170, 0.05);
        border-radius: 0 8px 8px 0;
    }
</style>
{% endblock %}

{% block body %}
<div class="user-item-container">
    <div class="d-flex justify-content-between align-items-center">
        <h1 class="page-title">{{ item.title }}</h1>

        {# read status #}
        <div class="status-badge {{ user_item.hasBeenRead ? 'yes' : 'no' }}">
            {{ user_item.hasBeenRead ? 'Lu' : 'Non lu' }}

        </div>

        {# like status #}
        {# <div class="status-badge {{ user_item.hasBeenLiked ? 'yes' : 'no' }}">
            {{ user_item.hasBeenLiked ? 'Aim√©' : 'Non aim√©' }}
        </div> #}
    </div>

    <div class="pagination my-4 d-flex justify-content-between">
        {% if not prev.isDisabled %}
            <a class="nav-button primary" href="{{ path('app_user_item_show', {feedId: item.feed.id, itemId: prev.itemId}) }}">‚Üê Pr√©c√©dent</a>
        {% else %}
            <span class="nav-button disabled">‚Üê Pr√©c√©dent</span>
        {% endif %}

        {% if not next.isDisabled %}
            <a class="nav-button primary" href="{{ path('app_user_item_show', {feedId: item.feed.id, itemId: next.itemId}) }}">Suivant ‚Üí</a>
        {% else %}
            <span class="nav-button disabled">Suivant ‚Üí</span>
        {% endif %}
    </div>

    <table class="content-table">
        <tbody>
            <tr>
                <th>Appr√©ciation</th>
                <td>
                    {# <span class="status-badge {{ user_item.hasBeenLiked ? 'yes' : 'no' }}">
                        {{ user_item.hasBeenLiked ? 'Aim√©' : 'Non aim√©' }}
                    </span> #}
                
                    <button
                        class="like-button {{ user_item.hasBeenLiked ? 'liked' : '' }}"
                        id="like-button"
                        data-liked="{{ user_item.hasBeenLiked ? '1' : '0' }}"
                        data-feed-id="{{ item.feed.id }}"
                        data-item-id="{{ item.id }}"
                        data-token="{{ csrf_token('like' ~ item.id) }}"
                    >
                        <span>{{ user_item.hasBeenLiked ? '‚ù§Ô∏è' : 'ü§ç' }}</span>
                        {{ user_item.hasBeenLiked ? 'Liked' : 'Like' }}
                    </button>
                </td>
            </tr>
            <tr>
                <th>Lien source</th>
                <td>
                    <a href="{{ item.url }}" target="_blank" class="url-link">
                        Voir l'article original
                    </a>
                </td>
            </tr>
            <tr>
                {# <th>Description</th> #}
                {# <td> #}
                    <div class="description-content">
                        {{ item.description|raw }}
                    </div>
                {# </td> #}
            </tr>
        </tbody>
    </table>
</div>
{% endblock %}

{% block javascripts %}
    {{ parent() }}
    <script lang="javascript">
        document.addEventListener('DOMContentLoaded', function () {
            const likeBtn = document.getElementById('like-button');

            likeBtn.addEventListener('click', async function () {
                const feedId = likeBtn.dataset.feedId;
                const itemId = likeBtn.dataset.itemId;
                const token = likeBtn.dataset.token;

                const response = await fetch(`/feed/${feedId}/item/${itemId}/like`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/x-www-form-urlencoded',
                        'X-Requested-With': 'XMLHttpRequest',
                    },
                    body: `_token=${token}`,
                });

                if (!response.ok) {
                    return;
                }

                const data = await response.json();
                const liked = data.liked;

                if (liked) {
                    likeBtn.innerHTML = '<span>‚ù§Ô∏è</span> Liked';
                    likeBtn.classList.add('liked');
                } else {
                    likeBtn.innerHTML = '<span>ü§ç</span> Like';
                    likeBtn.classList.remove('liked');
                }
                likeBtn.dataset.liked = liked ? '1' : '0';
                
                // Mise √† jour du badge de statut √©galement
                const statusBadge = likeBtn.previousElementSibling;
                if (statusBadge && statusBadge.classList.contains('status-badge')) {
                    if (liked) {
                        statusBadge.textContent = 'Aim√©';
                        statusBadge.classList.remove('no');
                        statusBadge.classList.add('yes');
                    } else {
                        statusBadge.textContent = 'Non aim√©';
                        statusBadge.classList.remove('yes');
                        statusBadge.classList.add('no');
                    }
                }
            });
        });
    </script>
{% endblock %}
